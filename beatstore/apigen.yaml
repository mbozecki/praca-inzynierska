---
openapi: 3.0.3
info:
  title: beatstore-backend API
  version: 1.0.0-SNAPSHOT
tags:
- name: beat
- name: users
paths:
  /api/payment:
    post:
      tags:
      - Stripe Controller
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CheckoutPayment'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
  /beat:
    get:
      tags:
      - beat
      summary: Get beat by criteria
      description: This operation gets beats based on certain criteria.
      operationId: getbeatsByCriteria
      parameters:
      - name: name
        in: query
        schema:
          type: string
      - name: page
        in: query
        schema:
          format: int32
          default: "0"
          minimum: 0
          type: integer
      - name: producedby
        in: query
        schema:
          type: string
      - name: size
        in: query
        schema:
          format: int32
          default: "50"
          maximum: 50
          minimum: 1
          type: integer
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageResultDTO'
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
    post:
      tags:
      - beat
      summary: Create beat
      description: This operations creates a beat
      operationId: createBeat
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BeatDTO'
      responses:
        "200":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BeatDTO'
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
  /beat/{id}:
    get:
      tags:
      - beat
      description: Get beat by ID
      operationId: getBeatById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: The corresponding beat resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BeatDTO'
        "400":
          description: Bad request
        "404":
          description: Not found
        "500":
          description: Internal Server Error
    put:
      tags:
      - beat
      summary: Update a beat
      description: This operation updates an already existing beat.
      operationId: updateBeat
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BeatDTO'
      responses:
        "201":
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BeatDTO'
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
    delete:
      tags:
      - beat
      summary: Delete a beat
      description: This operation deletes a beat with given Id
      operationId: deleteBeat
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: No content
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
  /hello:
    get:
      tags:
      - Greeting Resource
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string
  /users:
    get:
      tags:
      - users
      summary: Get user by criteria
      description: This operation gets users based on certain criteria.
      operationId: getusersByCriteria
      parameters:
      - name: email
        in: query
        schema:
          type: string
      - name: firebase_id
        in: query
        schema:
          type: string
      - name: name
        in: query
        schema:
          type: string
      - name: page
        in: query
        schema:
          format: int32
          default: "0"
          minimum: 0
          type: integer
      - name: size
        in: query
        schema:
          format: int32
          default: "50"
          maximum: 50
          minimum: 1
          type: integer
      - name: surname
        in: query
        schema:
          type: string
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageResultDTO'
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
    post:
      tags:
      - users
      summary: Create user
      description: This operations create a user
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDTO'
      responses:
        "200":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
  /users/{id}:
    get:
      tags:
      - users
      description: Get user by ID
      operationId: getUserById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: The corresponding user resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
        "400":
          description: Bad request
        "404":
          description: Not found
        "500":
          description: Internal Server Error
    put:
      tags:
      - users
      summary: Update a user
      description: This operation updates an already existed user.
      operationId: updateUser
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDTO'
      responses:
        "201":
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
    delete:
      tags:
      - users
      summary: Delete a user
      description: This operation deletes a user with given Id
      operationId: deleteUser
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: No content
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
components:
  schemas:
    Beat:
      type: object
      properties:
        guid:
          format: int64
          type: integer
        name:
          type: string
        beatimg:
          format: binary
          type: string
        price:
          format: double
          type: number
        genre:
          type: array
          items:
            type: string
        beatmp3:
          format: binary
          type: string
        producedby:
          type: string
        howmanysold:
          format: int32
          type: integer
    BeatDTO:
      type: object
      properties:
        guid:
          type: string
        name:
          type: string
        beatimg:
          format: binary
          type: string
        price:
          format: double
          type: number
        genre:
          type: array
          items:
            type: string
        beatmp3:
          format: binary
          type: string
        producedby:
          type: string
        howmanysold:
          format: int32
          type: integer
    CheckoutPayment:
      type: object
      properties:
        name:
          type: string
        currency:
          type: string
        successUrl:
          type: string
        cancelUrl:
          type: string
        amount:
          format: int64
          type: integer
        quantity:
          format: int64
          type: integer
    PageResultDTO:
      type: object
      properties:
        totalElements:
          format: int64
          type: integer
        number:
          format: int32
          type: integer
        size:
          format: int32
          type: integer
        totalPages:
          format: int64
          type: integer
        stream:
          type: array
          items:
            type: object
    UserDTO:
      type: object
      properties:
        guid:
          type: string
        name:
          type: string
        bio:
          type: string
        email:
          type: string
        firebase_id:
          type: string
        profilepicture:
          format: binary
          type: string
        likedbeats:
          type: array
          items:
            $ref: '#/components/schemas/Beat'
        beatsincart:
          type: array
          items:
            $ref: '#/components/schemas/Beat'
        boughtbeats:
          type: array
          items:
            $ref: '#/components/schemas/Beat'
        soldbeats:
          type: array
          items:
            $ref: '#/components/schemas/Beat'
        bankaccount:
          format: double
          type: number
